// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Models;

#nullable disable

namespace TaskManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Models.Notificacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLeitura")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Lida")
                        .HasColumnType("bit");

                    b.Property<string>("Mensagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjetoRelacionadoId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjetoRelacionadoProjetoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TarefaRelacionadaId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TarefaRelacionadaTarefaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlAcao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoRelacionadoProjetoId");

                    b.HasIndex("TarefaRelacionadaTarefaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificacoes");
                });

            modelBuilder.Entity("TaskManager.Models.Projeto", b =>
                {
                    b.Property<Guid>("ProjetoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UsuarioId1")
                        .HasColumnType("int");

                    b.HasKey("ProjetoId");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("Projetos");
                });

            modelBuilder.Entity("TaskManager.Models.ProjetoUsuario", b =>
                {
                    b.Property<Guid>("ProjetoUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjetoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Proprietario")
                        .HasColumnType("bit");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UsuarioId1")
                        .HasColumnType("int");

                    b.HasKey("ProjetoUsuarioId");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("ProjetosUsuarios");
                });

            modelBuilder.Entity("TaskManager.Models.Tarefa", b =>
                {
                    b.Property<Guid>("TarefaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AtribuidaParaId")
                        .HasColumnType("int");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CriadaPorId")
                        .HasColumnType("int");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("HorasEstimadas")
                        .HasColumnType("float");

                    b.Property<double?>("HorasReais")
                        .HasColumnType("float");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prioridade")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjetoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TarefaId");

                    b.HasIndex("AtribuidaParaId");

                    b.HasIndex("CriadaPorId");

                    b.HasIndex("ProjetoId");

                    b.ToTable("Tarefas");
                });

            modelBuilder.Entity("TaskManager.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("AtualizadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Perfil")
                        .HasColumnType("int");

                    b.Property<string>("PrimeiroNome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenhaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("UltimoNome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImagemPerfil")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TaskManager.Models.Notificacao", b =>
                {
                    b.HasOne("TaskManager.Models.Projeto", "ProjetoRelacionado")
                        .WithMany()
                        .HasForeignKey("ProjetoRelacionadoProjetoId");

                    b.HasOne("TaskManager.Models.Tarefa", "TarefaRelacionada")
                        .WithMany()
                        .HasForeignKey("TarefaRelacionadaTarefaId");

                    b.HasOne("TaskManager.Models.Usuario", "Usuario")
                        .WithMany("Notificacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjetoRelacionado");

                    b.Navigation("TarefaRelacionada");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TaskManager.Models.Projeto", b =>
                {
                    b.HasOne("TaskManager.Models.Usuario", "Usuario")
                        .WithMany("ProjetosCriados")
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TaskManager.Models.ProjetoUsuario", b =>
                {
                    b.HasOne("TaskManager.Models.Projeto", "Projeto")
                        .WithMany("ProjetosUsuarios")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Models.Usuario", "Usuario")
                        .WithMany("ProjetosUsuarios")
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Projeto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TaskManager.Models.Tarefa", b =>
                {
                    b.HasOne("TaskManager.Models.Usuario", "AtribuidaPara")
                        .WithMany("TarefasAtribuidas")
                        .HasForeignKey("AtribuidaParaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TaskManager.Models.Usuario", "CriadaPor")
                        .WithMany("TarefasCriadas")
                        .HasForeignKey("CriadaPorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskManager.Models.Projeto", "Projeto")
                        .WithMany("Tarefas")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AtribuidaPara");

                    b.Navigation("CriadaPor");

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("TaskManager.Models.Projeto", b =>
                {
                    b.Navigation("ProjetosUsuarios");

                    b.Navigation("Tarefas");
                });

            modelBuilder.Entity("TaskManager.Models.Usuario", b =>
                {
                    b.Navigation("Notificacoes");

                    b.Navigation("ProjetosCriados");

                    b.Navigation("ProjetosUsuarios");

                    b.Navigation("TarefasAtribuidas");

                    b.Navigation("TarefasCriadas");
                });
#pragma warning restore 612, 618
        }
    }
}
